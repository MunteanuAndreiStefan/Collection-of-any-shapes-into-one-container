// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Missing C it should return an alert.
        /// </summary>
        public void NotEnaughtParameters()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueAEdit = this.UILab1prob2Window2.UITextBoxValueAWindow.UITextBoxValueAEdit;
            WinEdit uITextBoxValueBEdit = this.UILab1prob2Window2.UITextBoxValueBWindow.UITextBoxValueBEdit;
            WinEdit uITextBoxValueCEdit = this.UILab1prob2Window2.UITextBoxValueCWindow.UITextBoxValueCEdit;
            WinButton uICalculateButton = this.UILab1prob2Window2.UICalculateWindow.UICalculateButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Last mouse action was not recorded.

            // Type '1' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.NotEnaughtParametersParams.UITextBoxValueAEditText;

            // Type '0' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.NotEnaughtParametersParams.UITextBoxValueBEditText;

            // Type '' in 'textBoxValueC' text box
            uITextBoxValueCEdit.Text = this.NotEnaughtParametersParams.UITextBoxValueCEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(69, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(33, 15));
        }
        
        /// <summary>
        /// Values only for A and B i should return an alertBox
        /// </summary>
        public void NoParamForC()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueAEdit = this.UILab1prob2Window2.UITextBoxValueAWindow.UITextBoxValueAEdit;
            WinEdit uITextBoxValueBEdit = this.UILab1prob2Window2.UITextBoxValueBWindow.UITextBoxValueBEdit;
            WinEdit uITextBoxValueCEdit = this.UILab1prob2Window2.UITextBoxValueCWindow.UITextBoxValueCEdit;
            WinButton uICalculateButton = this.UILab1prob2Window2.UICalculateWindow.UICalculateButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Last mouse action was not recorded.

            // Type '1' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.NoParamForCParams.UITextBoxValueAEditText;

            // Type '0' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.NoParamForCParams.UITextBoxValueBEditText;

            // Type '' in 'textBoxValueC' text box
            uITextBoxValueCEdit.Text = this.NoParamForCParams.UITextBoxValueCEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(69, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(33, 15));

            // Type '1' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.NoParamForCParams.UITextBoxValueAEditText1;

            // Type '0' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.NoParamForCParams.UITextBoxValueBEditText1;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(90, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(45, 9));
        }
        
        /// <summary>
        /// CalculateSomething
        /// </summary>
        public void CorrectCalculation()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueAEdit = this.UILab1prob2Window2.UITextBoxValueAWindow.UITextBoxValueAEdit;
            WinEdit uITextBoxValueBEdit = this.UILab1prob2Window2.UITextBoxValueBWindow.UITextBoxValueBEdit;
            WinEdit uITextBoxValueCEdit = this.UILab1prob2Window2.UITextBoxValueCWindow.UITextBoxValueCEdit;
            WinButton uICalculateButton = this.UILab1prob2Window2.UICalculateWindow.UICalculateButton;
            #endregion

            // Type '' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.CorrectCalculationParams.UITextBoxValueAEditText;

            // Type '{Back}{Back}{Back}' in 'textBoxValueA' text box
            Keyboard.SendKeys(uITextBoxValueAEdit, this.CorrectCalculationParams.UITextBoxValueAEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.CorrectCalculationParams.UITextBoxValueBEditText;

            // Click 'textBoxValueC' text box
            Mouse.Click(uITextBoxValueCEdit, new Point(22, 11));

            // Type '{Back}' in 'textBoxValueC' text box
            Keyboard.SendKeys(uITextBoxValueCEdit, this.CorrectCalculationParams.UITextBoxValueCEditSendKeys, ModifierKeys.None);

            // Type '0' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.CorrectCalculationParams.UITextBoxValueAEditText1;

            // Type '1' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.CorrectCalculationParams.UITextBoxValueBEditText1;

            // Type '0' in 'textBoxValueC' text box
            uITextBoxValueCEdit.Text = this.CorrectCalculationParams.UITextBoxValueCEditText;

            // Type '01' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.CorrectCalculationParams.UITextBoxValueAEditText2;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(76, 15));
        }
        
        /// <summary>
        /// Calculate100 - Use 'Calculate100Params' to pass parameters into this method.
        /// </summary>
        public void Calculate100()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueAEdit = this.UILab1prob2Window2.UITextBoxValueAWindow.UITextBoxValueAEdit;
            WinEdit uITextBoxValueBEdit = this.UILab1prob2Window2.UITextBoxValueBWindow.UITextBoxValueBEdit;
            WinEdit uITextBoxValueCEdit = this.UILab1prob2Window2.UITextBoxValueCWindow.UITextBoxValueCEdit;
            WinButton uIRecalculateButton = this.UILab1prob2Window2.UICalculateWindow.UIRecalculateButton;
            WinClient uIPictureGraphClient = this.UILab1prob2Window2.UIPictureGraphWindow.UIPictureGraphClient;
            WinButton uIRecalculateButton1 = this.UILab1prob2Window2.UICalculateWindow.UIRecalculateButton1;
            WinButton uIRecalculateButton2 = this.UILab1prob2Window2.UICalculateWindow.UIRecalculateButton2;
            WinButton uIRecalculateButton3 = this.UILab1prob2Window2.UICalculateWindow.UIRecalculateButton3;
            #endregion

            // Type '1' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.Calculate100Params.UITextBoxValueAEditText;

            // Type '0' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.Calculate100Params.UITextBoxValueBEditText;

            // Type '0' in 'textBoxValueC' text box
            uITextBoxValueCEdit.Text = this.Calculate100Params.UITextBoxValueCEditText;

            // Click 'Recalculate' button
            Mouse.Click(uIRecalculateButton, new Point(48, 14));

            // Click 'pictureGraph' client
            Mouse.Click(uIPictureGraphClient, new Point(94, 82));

            // Type 'Control + i' in 'Recalculate' button
            Keyboard.SendKeys(uIRecalculateButton1, this.Calculate100Params.UIRecalculateButton1SendKeys, ModifierKeys.Control);

            // Type 'Control + l' in 'Recalculate' button
            Keyboard.SendKeys(uIRecalculateButton2, this.Calculate100Params.UIRecalculateButton2SendKeys, ModifierKeys.Control);

            // Type '{LControlKey}' in 'Recalculate' button
            Keyboard.SendKeys(uIRecalculateButton3, this.Calculate100Params.UIRecalculateButton3SendKeys, ModifierKeys.None);

            // Click 'pictureGraph' client
            Mouse.Click(uIPictureGraphClient, new Point(95, 88));
        }
        
        /// <summary>
        /// AssertImage - Use 'AssertImageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertImage()
        {
            #region Variable Declarations
            WinClient uIPictureGraphClient = this.UILab1prob2Window2.UIPictureGraphWindow.UIPictureGraphClient;
            #endregion

            // Verify that the 'TechnologyName' property of 'pictureGraph' client equals 'MSAA'
            Assert.AreEqual(this.AssertImageExpectedValues.UIPictureGraphClientTechnologyName, uIPictureGraphClient.TechnologyName, "No image");
        }
        
        /// <summary>
        /// SaveTest - Use 'SaveTestParams' to pass parameters into this method.
        /// </summary>
        public void SaveTest()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueAEdit = this.UILab1prob2Window2.UITextBoxValueAWindow.UITextBoxValueAEdit;
            WinClient uIPictureGraphClient = this.UILab1prob2Window2.UIPictureGraphWindow.UIPictureGraphClient;
            WinButton uIRecalculateButton = this.UILab1prob2Window2.UICalculateWindow.UIRecalculateButton;
            WinButton uISaveImgButton = this.UILab1prob2Window2.UISaveImgWindow.UISaveImgButton;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UIDesktopTreeItem.UIThisPCTreeItem.UIDesktopTreeItem;
            WinComboBox uISaveastypeComboBox = this.UISaveAsWindow.UIDetailsPanePane.UISaveastypeComboBox;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinControl uISaveAsDialog = this.UISaveAsWindow.UISaveAsDialog;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Move 'textBoxValueA' text box to 'pictureGraph' client
            uIPictureGraphClient.EnsureClickable(new Point(12, 31));
            Mouse.StartDragging(uITextBoxValueAEdit, new Point(52, 12));
            Mouse.StopDragging(uIPictureGraphClient, new Point(12, 31));

            // Click 'Recalculate' button
            Mouse.Click(uIRecalculateButton, new Point(65, 19));

            // Move 'textBoxValueA' text box to 'pictureGraph' client
            uIPictureGraphClient.EnsureClickable(new Point(135, 41));
            Mouse.StartDragging(uITextBoxValueAEdit, new Point(19, 3));
            Mouse.StopDragging(uIPictureGraphClient, new Point(135, 41));

            // Click 'Save Img' button
            Mouse.Click(uISaveImgButton, new Point(34, 13));

            // Click 'Desktop' -> 'This PC' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(40, 10));

            // Click 'Save as type:' combo box
            Mouse.Click(uISaveastypeComboBox, new Point(50, 0));

            // Select 'test' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveTestParams.UIFilenameComboBoxEditableItem;

            // Click 'Save As' Dialog
            Mouse.Click(uISaveAsDialog, new Point(272, 416));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(53, 8));
        }
        
        /// <summary>
        /// Add 2 values click Calculate Ok at alert insert 3rd value then calculate save as img and text then recalculate test.
        /// </summary>
        public void CodedTest()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueAEdit = this.UILab1prob2Window2.UITextBoxValueAWindow.UITextBoxValueAEdit;
            WinEdit uITextBoxValueBEdit = this.UILab1prob2Window2.UITextBoxValueBWindow.UITextBoxValueBEdit;
            WinButton uICalculateButton = this.UILab1prob2Window2.UICalculateWindow.UICalculateButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinEdit uITextBoxValueCEdit = this.UILab1prob2Window2.UITextBoxValueCWindow.UITextBoxValueCEdit;
            WinButton uISaveImgButton = this.UILab1prob2Window2.UISaveImgWindow.UISaveImgButton;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UIDesktopTreeItem.UIThisPCTreeItem.UIDesktopTreeItem;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinWindow uIItemWindow = this.UISaveAsWindow.UIExplorerPanePane.UIItemWindow;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinComboBox uISaveastypeComboBox = this.UISaveAsWindow.UIDetailsPanePane.UISaveastypeComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uISavetxtButton = this.UILab1prob2Window2.UISavetxtWindow.UISavetxtButton;
            WinButton uIRecalculateButton = this.UILab1prob2Window2.UICalculateWindow.UIRecalculateButton;
            #endregion

            // Type '1' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.CodedTestParams.UITextBoxValueAEditText;

            // Type '0' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.CodedTestParams.UITextBoxValueBEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(76, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(47, 3));

            // Type '0' in 'textBoxValueC' text box
            uITextBoxValueCEdit.Text = this.CodedTestParams.UITextBoxValueCEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(86, 14));

            // Click 'Save Img' button
            Mouse.Click(uISaveImgButton, new Point(37, 13));

            // Click 'Desktop' -> 'This PC' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(64, 20));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(25, 4));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(33, 12));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(44, 16));

            // Click window
            Mouse.Click(uIItemWindow, new Point(116, -1));

            // Select 'test.png' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.CodedTestParams.UIFilenameComboBoxEditableItem;

            // Click 'Save as type:' combo box
            Mouse.Click(uISaveastypeComboBox, new Point(184, 2));

            // Type '{Escape}' in 'Save as type:' combo box
            Keyboard.SendKeys(uISaveastypeComboBox, this.CodedTestParams.UISaveastypeComboBoxSendKeys, ModifierKeys.None);

            // Click 'File name:' text box
            Mouse.Click(uIFilenameEdit, new Point(208, 14));

            // Select 'All files (*.*)' in 'Save as type:' combo box
            uISaveastypeComboBox.SelectedItem = this.CodedTestParams.UISaveastypeComboBoxSelectedItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(57, 18));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(24, 5));

            // Click 'Save txt' button
            Mouse.Click(uISavetxtButton, new Point(44, 12));

            // Select 'test.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.CodedTestParams.UIFilenameComboBoxEditableItem1;

            // Select 'All files (*.*)' in 'Save as type:' combo box
            uISaveastypeComboBox.SelectedItem = this.CodedTestParams.UISaveastypeComboBoxSelectedItem1;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(30, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(12, 12));

            // Type '5' in 'textBoxValueB' text box
            uITextBoxValueBEdit.Text = this.CodedTestParams.UITextBoxValueBEditText1;

            // Click 'Recalculate' button
            Mouse.Click(uIRecalculateButton, new Point(73, 7));

            // Type '6' in 'textBoxValueA' text box
            uITextBoxValueAEdit.Text = this.CodedTestParams.UITextBoxValueAEditText1;

            // Click 'Recalculate' button
            Mouse.Click(uIRecalculateButton, new Point(42, 11));
        }
        
        #region Properties
        public virtual NotEnaughtParametersParams NotEnaughtParametersParams
        {
            get
            {
                if ((this.mNotEnaughtParametersParams == null))
                {
                    this.mNotEnaughtParametersParams = new NotEnaughtParametersParams();
                }
                return this.mNotEnaughtParametersParams;
            }
        }
        
        public virtual NoParamForCParams NoParamForCParams
        {
            get
            {
                if ((this.mNoParamForCParams == null))
                {
                    this.mNoParamForCParams = new NoParamForCParams();
                }
                return this.mNoParamForCParams;
            }
        }
        
        public virtual CorrectCalculationParams CorrectCalculationParams
        {
            get
            {
                if ((this.mCorrectCalculationParams == null))
                {
                    this.mCorrectCalculationParams = new CorrectCalculationParams();
                }
                return this.mCorrectCalculationParams;
            }
        }
        
        public virtual Calculate100Params Calculate100Params
        {
            get
            {
                if ((this.mCalculate100Params == null))
                {
                    this.mCalculate100Params = new Calculate100Params();
                }
                return this.mCalculate100Params;
            }
        }
        
        public virtual AssertImageExpectedValues AssertImageExpectedValues
        {
            get
            {
                if ((this.mAssertImageExpectedValues == null))
                {
                    this.mAssertImageExpectedValues = new AssertImageExpectedValues();
                }
                return this.mAssertImageExpectedValues;
            }
        }
        
        public virtual SaveTestParams SaveTestParams
        {
            get
            {
                if ((this.mSaveTestParams == null))
                {
                    this.mSaveTestParams = new SaveTestParams();
                }
                return this.mSaveTestParams;
            }
        }
        
        public virtual CodedTestParams CodedTestParams
        {
            get
            {
                if ((this.mCodedTestParams == null))
                {
                    this.mCodedTestParams = new CodedTestParams();
                }
                return this.mCodedTestParams;
            }
        }
        
        public UILab1prob2Window2 UILab1prob2Window2
        {
            get
            {
                if ((this.mUILab1prob2Window2 == null))
                {
                    this.mUILab1prob2Window2 = new UILab1prob2Window2();
                }
                return this.mUILab1prob2Window2;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        #endregion
        
        #region Fields
        private NotEnaughtParametersParams mNotEnaughtParametersParams;
        
        private NoParamForCParams mNoParamForCParams;
        
        private CorrectCalculationParams mCorrectCalculationParams;
        
        private Calculate100Params mCalculate100Params;
        
        private AssertImageExpectedValues mAssertImageExpectedValues;
        
        private SaveTestParams mSaveTestParams;
        
        private CodedTestParams mCodedTestParams;
        
        private UILab1prob2Window2 mUILab1prob2Window2;
        
        private UIOKWindow mUIOKWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NotEnaughtParameters'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class NotEnaughtParametersParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText = "1";
        
        /// <summary>
        /// Type '0' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText = "0";
        
        /// <summary>
        /// Type '' in 'textBoxValueC' text box
        /// </summary>
        public string UITextBoxValueCEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NoParamForC'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class NoParamForCParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText = "1";
        
        /// <summary>
        /// Type '0' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText = "0";
        
        /// <summary>
        /// Type '' in 'textBoxValueC' text box
        /// </summary>
        public string UITextBoxValueCEditText = "";
        
        /// <summary>
        /// Type '1' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText1 = "1";
        
        /// <summary>
        /// Type '0' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText1 = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CorrectCalculation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CorrectCalculationParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText = "";
        
        /// <summary>
        /// Type '{Back}{Back}{Back}' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditSendKeys = "{Back}{Back}{Back}";
        
        /// <summary>
        /// Type '' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText = "";
        
        /// <summary>
        /// Type '{Back}' in 'textBoxValueC' text box
        /// </summary>
        public string UITextBoxValueCEditSendKeys = "{Back}";
        
        /// <summary>
        /// Type '0' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText1 = "0";
        
        /// <summary>
        /// Type '1' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText1 = "1";
        
        /// <summary>
        /// Type '0' in 'textBoxValueC' text box
        /// </summary>
        public string UITextBoxValueCEditText = "0";
        
        /// <summary>
        /// Type '01' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText2 = "01";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Calculate100'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Calculate100Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText = "1";
        
        /// <summary>
        /// Type '0' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText = "0";
        
        /// <summary>
        /// Type '0' in 'textBoxValueC' text box
        /// </summary>
        public string UITextBoxValueCEditText = "0";
        
        /// <summary>
        /// Type 'Control + i' in 'Recalculate' button
        /// </summary>
        public string UIRecalculateButton1SendKeys = "i";
        
        /// <summary>
        /// Type 'Control + l' in 'Recalculate' button
        /// </summary>
        public string UIRecalculateButton2SendKeys = "l";
        
        /// <summary>
        /// Type '{LControlKey}' in 'Recalculate' button
        /// </summary>
        public string UIRecalculateButton3SendKeys = "{LControlKey}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertImage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertImageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TechnologyName' property of 'pictureGraph' client equals 'MSAA'
        /// </summary>
        public string UIPictureGraphClientTechnologyName = "MSAA";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class SaveTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'test' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CodedTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CodedTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText = "1";
        
        /// <summary>
        /// Type '0' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText = "0";
        
        /// <summary>
        /// Type '0' in 'textBoxValueC' text box
        /// </summary>
        public string UITextBoxValueCEditText = "0";
        
        /// <summary>
        /// Select 'test.png' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test.png";
        
        /// <summary>
        /// Type '{Escape}' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSendKeys = "{Escape}";
        
        /// <summary>
        /// Select 'All files (*.*)' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSelectedItem = "All files (*.*)";
        
        /// <summary>
        /// Select 'test.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "test.txt";
        
        /// <summary>
        /// Select 'All files (*.*)' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSelectedItem1 = "All files (*.*)";
        
        /// <summary>
        /// Type '5' in 'textBoxValueB' text box
        /// </summary>
        public string UITextBoxValueBEditText1 = "5";
        
        /// <summary>
        /// Type '6' in 'textBoxValueA' text box
        /// </summary>
        public string UITextBoxValueAEditText1 = "6";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILab1prob2Window2 : WinWindow
    {
        
        public UILab1prob2Window2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Lab1 prob 2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public UITextBoxValueAWindow UITextBoxValueAWindow
        {
            get
            {
                if ((this.mUITextBoxValueAWindow == null))
                {
                    this.mUITextBoxValueAWindow = new UITextBoxValueAWindow(this);
                }
                return this.mUITextBoxValueAWindow;
            }
        }
        
        public UITextBoxValueBWindow UITextBoxValueBWindow
        {
            get
            {
                if ((this.mUITextBoxValueBWindow == null))
                {
                    this.mUITextBoxValueBWindow = new UITextBoxValueBWindow(this);
                }
                return this.mUITextBoxValueBWindow;
            }
        }
        
        public UITextBoxValueCWindow UITextBoxValueCWindow
        {
            get
            {
                if ((this.mUITextBoxValueCWindow == null))
                {
                    this.mUITextBoxValueCWindow = new UITextBoxValueCWindow(this);
                }
                return this.mUITextBoxValueCWindow;
            }
        }
        
        public UICalculateWindow UICalculateWindow
        {
            get
            {
                if ((this.mUICalculateWindow == null))
                {
                    this.mUICalculateWindow = new UICalculateWindow(this);
                }
                return this.mUICalculateWindow;
            }
        }
        
        public UIPictureGraphWindow UIPictureGraphWindow
        {
            get
            {
                if ((this.mUIPictureGraphWindow == null))
                {
                    this.mUIPictureGraphWindow = new UIPictureGraphWindow(this);
                }
                return this.mUIPictureGraphWindow;
            }
        }
        
        public UISaveImgWindow UISaveImgWindow
        {
            get
            {
                if ((this.mUISaveImgWindow == null))
                {
                    this.mUISaveImgWindow = new UISaveImgWindow(this);
                }
                return this.mUISaveImgWindow;
            }
        }
        
        public UISavetxtWindow UISavetxtWindow
        {
            get
            {
                if ((this.mUISavetxtWindow == null))
                {
                    this.mUISavetxtWindow = new UISavetxtWindow(this);
                }
                return this.mUISavetxtWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITextBoxValueAWindow mUITextBoxValueAWindow;
        
        private UITextBoxValueBWindow mUITextBoxValueBWindow;
        
        private UITextBoxValueCWindow mUITextBoxValueCWindow;
        
        private UICalculateWindow mUICalculateWindow;
        
        private UIPictureGraphWindow mUIPictureGraphWindow;
        
        private UISaveImgWindow mUISaveImgWindow;
        
        private UISavetxtWindow mUISavetxtWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextBoxValueAWindow : WinWindow
    {
        
        public UITextBoxValueAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxValueA";
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxValueAEdit
        {
            get
            {
                if ((this.mUITextBoxValueAEdit == null))
                {
                    this.mUITextBoxValueAEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxValueAEdit.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUITextBoxValueAEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxValueAEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextBoxValueBWindow : WinWindow
    {
        
        public UITextBoxValueBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxValueB";
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxValueBEdit
        {
            get
            {
                if ((this.mUITextBoxValueBEdit == null))
                {
                    this.mUITextBoxValueBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxValueBEdit.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUITextBoxValueBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxValueBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITextBoxValueCWindow : WinWindow
    {
        
        public UITextBoxValueCWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxValueC";
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxValueCEdit
        {
            get
            {
                if ((this.mUITextBoxValueCEdit == null))
                {
                    this.mUITextBoxValueCEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxValueCEdit.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUITextBoxValueCEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxValueCEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICalculateWindow : WinWindow
    {
        
        public UICalculateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "calculateButton";
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public WinButton UICalculateButton
        {
            get
            {
                if ((this.mUICalculateButton == null))
                {
                    this.mUICalculateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICalculateButton.SearchProperties[WinButton.PropertyNames.Name] = "Calculate";
                    this.mUICalculateButton.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUICalculateButton;
            }
        }
        
        public WinButton UIRecalculateButton
        {
            get
            {
                if ((this.mUIRecalculateButton == null))
                {
                    this.mUIRecalculateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRecalculateButton.SearchProperties[WinButton.PropertyNames.Name] = "Recalculate";
                    this.mUIRecalculateButton.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUIRecalculateButton;
            }
        }
        
        public WinButton UIRecalculateButton1
        {
            get
            {
                if ((this.mUIRecalculateButton1 == null))
                {
                    this.mUIRecalculateButton1 = new WinButton(this);
                    #region Search Criteria
                    this.mUIRecalculateButton1.SearchProperties[WinButton.PropertyNames.Name] = "Recalculate";
                    this.mUIRecalculateButton1.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUIRecalculateButton1;
            }
        }
        
        public WinButton UIRecalculateButton2
        {
            get
            {
                if ((this.mUIRecalculateButton2 == null))
                {
                    this.mUIRecalculateButton2 = new WinButton(this);
                    #region Search Criteria
                    this.mUIRecalculateButton2.SearchProperties[WinButton.PropertyNames.Name] = "Recalculate";
                    this.mUIRecalculateButton2.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUIRecalculateButton2;
            }
        }
        
        public WinButton UIRecalculateButton3
        {
            get
            {
                if ((this.mUIRecalculateButton3 == null))
                {
                    this.mUIRecalculateButton3 = new WinButton(this);
                    #region Search Criteria
                    this.mUIRecalculateButton3.SearchProperties[WinButton.PropertyNames.Name] = "Recalculate";
                    this.mUIRecalculateButton3.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUIRecalculateButton3;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICalculateButton;
        
        private WinButton mUIRecalculateButton;
        
        private WinButton mUIRecalculateButton1;
        
        private WinButton mUIRecalculateButton2;
        
        private WinButton mUIRecalculateButton3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPictureGraphWindow : WinWindow
    {
        
        public UIPictureGraphWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pictureGraph";
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public WinClient UIPictureGraphClient
        {
            get
            {
                if ((this.mUIPictureGraphClient == null))
                {
                    this.mUIPictureGraphClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPictureGraphClient.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUIPictureGraphClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPictureGraphClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISaveImgWindow : WinWindow
    {
        
        public UISaveImgWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "saveImageButton";
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveImgButton
        {
            get
            {
                if ((this.mUISaveImgButton == null))
                {
                    this.mUISaveImgButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveImgButton.SearchProperties[WinButton.PropertyNames.Name] = "Save Img";
                    this.mUISaveImgButton.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUISaveImgButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveImgButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISavetxtWindow : WinWindow
    {
        
        public UISavetxtWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "saveTextButton";
            this.WindowTitles.Add("Lab1 prob 2");
            #endregion
        }
        
        #region Properties
        public WinButton UISavetxtButton
        {
            get
            {
                if ((this.mUISavetxtButton == null))
                {
                    this.mUISavetxtButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISavetxtButton.SearchProperties[WinButton.PropertyNames.Name] = "Save txt";
                    this.mUISavetxtButton.WindowTitles.Add("Lab1 prob 2");
                    #endregion
                }
                return this.mUISavetxtButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISavetxtButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public WinControl UISaveAsDialog
        {
            get
            {
                if ((this.mUISaveAsDialog == null))
                {
                    this.mUISaveAsDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUISaveAsDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Save As";
                    this.mUISaveAsDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUISaveAsDialog.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveAsDialog;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIExplorerPanePane UIExplorerPanePane
        {
            get
            {
                if ((this.mUIExplorerPanePane == null))
                {
                    this.mUIExplorerPanePane = new UIExplorerPanePane(this);
                }
                return this.mUIExplorerPanePane;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private WinControl mUISaveAsDialog;
        
        private UISaveWindow mUISaveWindow;
        
        private UIExplorerPanePane mUIExplorerPanePane;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIThisPCTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new UIThisPCTreeItem(this);
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIThisPCTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIThisPCTreeItem : WinTreeItem
    {
        
        public UIThisPCTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "2";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UISaveastypeComboBox
        {
            get
            {
                if ((this.mUISaveastypeComboBox == null))
                {
                    this.mUISaveastypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISaveastypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Save as type:";
                    this.mUISaveastypeComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveastypeComboBox;
            }
        }
        
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUISaveastypeComboBox;
        
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIExplorerPanePane : WinPane
    {
        
        public UIExplorerPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Explorer Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "FloatNotifySink";
                    this.mUIItemWindow.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
